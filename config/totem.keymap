//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

#define KEYS_L 0 1 2 3 4  10 11 12 13 14  20 21 22 23 24 25  // left hand
#define KEYS_R 5 6 7 8 9  15 16 17 18 19  26 27 28 29 30 31  // right hand
#define THUMBS 37 // thumb cluster for both hands (only non-switching)
#define BASE  0
#define SYMB  1
#define FUNC  2
#define NAVI  3
#define MOUS  4
#define SYST  5

&mt {
    quick-tap-ms = <100>;
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <170>;
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_caps {
            timeout-ms = <100>;
            key-positions = <33 36>; // Combo `thumb ESC + thumb Backspace`
            bindings = <&kp CAPSLOCK>;
        };

        combo_caps2 {
            timeout-ms = <100>;
            key-positions = <20 31>; // Combo `right-shift+left-shift`
            bindings = <&kp CAPSLOCK>;
        };

        combo_boot_left {
            timeout-ms = <100>;
            key-positions = <0 1 2 4>; // Combo `Q+W+E+T`
            bindings = <&bootloader>;
        };

        combo_boot_right {
            timeout-ms = <100>;
            key-positions = <5 7 8 9>; // Combo `Y+I+O+P`
            bindings = <&bootloader>;
        };

        combo_sys_left {
            timeout-ms = <100>;
            key-positions = <24 34>; // Combo `v+space`
            bindings = <&mo SYST>;
        };

        combo_sys_right {
            timeout-ms = <100>;
            key-positions = <27 35>; // Combo `m+space`
            bindings = <&mo SYST>;
        };
    };

    behaviors {
        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <KEYS_R>;
            hold-trigger-on-release;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <KEYS_L>;
            hold-trigger-on-release;
        };

        hml2: home_row_mod_left2 {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&mo>, <&kp>;

            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;
        };

        hmr2: home_row_mod_right2 {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&mo>, <&kp>;

            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;
        };
    };

    macros {
        gif: gif {
            label = "giphy";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LSHFT>,
                <&macro_tap>,
                <&kp N2>,
                <&macro_release>,
                <&kp LSHFT>,
                <&macro_tap>,
                <&kp G &kp I &kp F>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "BASE";
            bindings = <
                 &kp Q          &kp W             &kp E         &kp R         &kp T              &kp Y            &kp U                 &kp I            &kp O             &kp P
                 &hml LSHIFT A  &hml RIGHT_ALT S  &hml2 SYMB D  &hml LCTRL F  &hml LEFT_ALT G    &hmr LEFT_ALT H  &hmr RCTRL J          &hmr2 SYMB K     &hmr RIGHT_ALT L  &hmr RSHIFT SEMICOLON
&hml LSHIFT TAB  &kp Z          &kp X             &kp C         &hml RGUI V   &kp B              &kp N            &hmr RGUI M           &kp COMMA        &kp DOT           &kp SLASH              &hmr RSHFT RET
                                                  &sl FUNC      &lt MOUS ESC  &hml LGUI SPACE    &hmr LGUI SPACE  &hmr2 NAVI BACKSPACE  &kp K_CMENU
            >;
        };

        symbols {
            label = "SYMB";
            bindings = <
        &kp NUMBER_1       &kp NUMBER_2        &kp NUMBER_3       &kp NUMBER_4            &kp N5                   &kp NUMBER_6        &kp N7                  &kp N8         &kp N9                &kp N0
        &hml LSHFT ESCAPE  &hml RIGHT_ALT INS  &hml2 SYMB DELETE  &hml LCTRL TAB          &hml LEFT_ALT BACKSPACE  &hmr LEFT_ALT LEFT  &hmr RCTRL DOWN         &hmr2 SYMB UP  &hmr RIGHT_ALT RIGHT  &hmr RSHFT ENTER
&trans  &kp GRAVE          &kp MINUS           &kp EQUAL          &hml RGUI LEFT_BRACKET  &kp RIGHT_BRACKET        &kp BACKSLASH       &hmr RGUI SINGLE_QUOTE  &kp COMMA      &kp PERIOD            &kp SLASH         &trans
                                               &trans             &trans                  &trans                   &trans              &trans                  &trans
            >;
        };

        func {
            label = "FUNC";
            bindings = <
        &kp F1           &kp F2              &kp F3   &kp F4          &kp F5             &kp F6             &kp F7          &kp F8   &kp F9              &kp F10
        &hml LSHIFT F11  &hml RIGHT_ALT F12  &kp F13  &hml LCTRL F14  &hml LEFT_ALT F15  &hmr LEFT_ALT F16  &hmr RCTRL F17  &kp F18  &hmr RIGHT_ALT F19  &hmr RSHIFT F20
&trans  &kp F21          &kp F22             &kp F23  &hml RGUI F24   &none              &none              &kp RGUI        &none    &none               &none    &trans
                                             &trans   &trans          &trans             &trans             &trans          &trans
            >;
        };

        navigation {
            label = "NAVI";
            bindings = <
        &none       &none    &none    &none    &none          &kp HOME  &kp DEL        &kp INS    &kp END    &kp BACKSPACE
        &kp ESCAPE  &kp INS  &kp DEL  &kp TAB  &kp BACKSPACE  &kp LEFT  &kp DOWN       &kp UP     &kp RIGHT  &kp ENTER
&trans  &none       &none    &none    &none    &none          &none     &kp PAGE_DOWN  &kp PG_UP  &none      &none          &trans
                             &trans   &trans   &trans         &trans    &trans         &trans
            >;
        };

        mouse {
            label = "MOUS";
            bindings = <
        &none     &none      &none      &none      &none       &none           &none           &none         &none            &none
        &mkp MB4  &mkp LCLK  &mkp MCLK  &mkp RCLK  &mkp MB5    &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &mkp LCLK
&trans  &none     &none      &none      &none      &none       &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT  &none      &trans
                             &trans     &trans     &trans      &trans          &trans          &trans
            >;
        };

        system {
            label = "SYST";
            bindings = <
                &bt BT_CLR    &none         &none         &none         &sys_reset      &sys_reset        &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &none  &none
                &none         &none         &out OUT_USB  &out OUT_BLE  &none           &kp C_MUTE        &kp C_VOL_DN          &kp C_VOL_UP          &none  &none
&bt BT_CLR_ALL  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp K_PLAY_PAUSE  &kp K_PREV            &kp C_NEXT            &none  &none  &none
                                            &trans        &trans        &trans          &trans            &trans                &trans
            >;
        };
    };
};
